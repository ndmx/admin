{"ast":null,"code":"import { addDoc, collection, doc, getDoc, updateDoc, serverTimestamp } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nexport const sendMessage = async (fromId, toId, messageObj) => {\n  try {\n    const fromUser = await getUser(fromId);\n    const toUser = await getUser(toId);\n    if (!fromUser || !toUser) {\n      return false;\n    }\n    messageObj.timestamp = getTimestamp();\n\n    // Update sent messages for fromUser\n    const fromUserRef = doc(db, \"users\", fromId);\n    await updateDoc(fromUserRef, {\n      sentMessages: [...fromUser.sentMessages, messageObj]\n    });\n\n    // Update mailbox for toUser\n    const toUserRef = doc(db, \"users\", toId);\n    await updateDoc(toUserRef, {\n      mailbox: [...toUser.mailbox, messageObj]\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error sending message: \", error);\n    return false;\n  }\n};\nconst getUser = async userId => {\n  const userDocRef = doc(db, \"users\", userId);\n  const userSnap = await getDoc(userDocRef);\n  return userSnap.exists() ? userSnap.data() : null;\n};\nconst getTimestamp = () => {\n  return serverTimestamp();\n};","map":{"version":3,"names":["addDoc","collection","doc","getDoc","updateDoc","serverTimestamp","db","sendMessage","fromId","toId","messageObj","fromUser","getUser","toUser","timestamp","getTimestamp","fromUserRef","sentMessages","toUserRef","mailbox","error","console","userId","userDocRef","userSnap","exists","data"],"sources":["/Users/ndmx/Dev/adminpanel/admin/src/utils/mockDatabase.js"],"sourcesContent":["import { addDoc, collection, doc, getDoc, updateDoc, serverTimestamp } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\n\nexport const sendMessage = async (fromId, toId, messageObj) => {\n  try {\n    const fromUser = await getUser(fromId);\n    const toUser = await getUser(toId);\n\n    if (!fromUser || !toUser) {\n      return false;\n    }\n\n    messageObj.timestamp = getTimestamp();\n\n    // Update sent messages for fromUser\n    const fromUserRef = doc(db, \"users\", fromId);\n    await updateDoc(fromUserRef, {\n      sentMessages: [...fromUser.sentMessages, messageObj],\n    });\n\n    // Update mailbox for toUser\n    const toUserRef = doc(db, \"users\", toId);\n    await updateDoc(toUserRef, {\n      mailbox: [...toUser.mailbox, messageObj],\n    });\n\n    return true;\n  } catch (error) {\n    console.error(\"Error sending message: \", error);\n    return false;\n  }\n};\n\nconst getUser = async (userId) => {\n  const userDocRef = doc(db, \"users\", userId);\n  const userSnap = await getDoc(userDocRef);\n  return userSnap.exists() ? userSnap.data() : null;\n};\n\nconst getTimestamp = () => {\n  return serverTimestamp();\n};\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,eAAe,QAAQ,oBAAoB;AAChG,SAASC,EAAE,QAAQ,aAAa;AAEhC,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,MAAM,EAAEC,IAAI,EAAEC,UAAU,KAAK;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACJ,MAAM,CAAC;IACtC,MAAMK,MAAM,GAAG,MAAMD,OAAO,CAACH,IAAI,CAAC;IAElC,IAAI,CAACE,QAAQ,IAAI,CAACE,MAAM,EAAE;MACxB,OAAO,KAAK;IACd;IAEAH,UAAU,CAACI,SAAS,GAAGC,YAAY,CAAC,CAAC;;IAErC;IACA,MAAMC,WAAW,GAAGd,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEE,MAAM,CAAC;IAC5C,MAAMJ,SAAS,CAACY,WAAW,EAAE;MAC3BC,YAAY,EAAE,CAAC,GAAGN,QAAQ,CAACM,YAAY,EAAEP,UAAU;IACrD,CAAC,CAAC;;IAEF;IACA,MAAMQ,SAAS,GAAGhB,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEG,IAAI,CAAC;IACxC,MAAML,SAAS,CAACc,SAAS,EAAE;MACzBC,OAAO,EAAE,CAAC,GAAGN,MAAM,CAACM,OAAO,EAAET,UAAU;IACzC,CAAC,CAAC;IAEF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC;AAED,MAAMR,OAAO,GAAG,MAAOU,MAAM,IAAK;EAChC,MAAMC,UAAU,GAAGrB,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEgB,MAAM,CAAC;EAC3C,MAAME,QAAQ,GAAG,MAAMrB,MAAM,CAACoB,UAAU,CAAC;EACzC,OAAOC,QAAQ,CAACC,MAAM,CAAC,CAAC,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC,GAAG,IAAI;AACnD,CAAC;AAED,MAAMX,YAAY,GAAGA,CAAA,KAAM;EACzB,OAAOV,eAAe,CAAC,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}