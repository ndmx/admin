{"ast":null,"code":"import { doc, getDoc, updateDoc } from \"firebase/firestore\"; // Removed unused imports\nimport { db } from \"../firebase\";\nexport const sendMessage = async (fromId, toId, messageObj) => {\n  try {\n    const fromUser = await getUser(fromId);\n    const toUser = await getUser(toId);\n    if (!fromUser || !toUser) {\n      console.log(\"User does not exist\");\n      return false;\n    }\n    messageObj.timestamp = new Date().toISOString(); // Using local timestamp\n\n    // Update sent messages for fromUser\n    const fromUserRef = doc(db, \"users\", fromId);\n    await updateDoc(fromUserRef, {\n      sentMessages: [...(fromUser.sentMessages || []), messageObj]\n    });\n\n    // Update mailbox for toUser\n    const toUserRef = doc(db, \"users\", toId);\n    await updateDoc(toUserRef, {\n      mailbox: [...(toUser.mailbox || []), messageObj]\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error sending message: \", error);\n    return false;\n  }\n};\nconst getUser = async userId => {\n  const userDocRef = doc(db, \"users\", userId);\n  const userSnap = await getDoc(userDocRef);\n  return userSnap.exists() ? userSnap.data() : null;\n};","map":{"version":3,"names":["doc","getDoc","updateDoc","db","sendMessage","fromId","toId","messageObj","fromUser","getUser","toUser","console","log","timestamp","Date","toISOString","fromUserRef","sentMessages","toUserRef","mailbox","error","userId","userDocRef","userSnap","exists","data"],"sources":["/Users/ndmx/Dev/adminpanel/admin/src/utils/mockDatabase.js"],"sourcesContent":["import { doc, getDoc, updateDoc } from \"firebase/firestore\";  // Removed unused imports\nimport { db } from \"../firebase\";\n\nexport const sendMessage = async (fromId, toId, messageObj) => {\n  try {\n    const fromUser = await getUser(fromId);\n    const toUser = await getUser(toId);\n\n    if (!fromUser || !toUser) {\n      console.log(\"User does not exist\");\n      return false;\n    }\n\n    messageObj.timestamp = new Date().toISOString();  // Using local timestamp\n\n    // Update sent messages for fromUser\n    const fromUserRef = doc(db, \"users\", fromId);\n    await updateDoc(fromUserRef, {\n      sentMessages: [...(fromUser.sentMessages || []), messageObj],\n    });\n\n    // Update mailbox for toUser\n    const toUserRef = doc(db, \"users\", toId);\n    await updateDoc(toUserRef, {\n      mailbox: [...(toUser.mailbox || []), messageObj],\n    });\n\n    return true;\n  } catch (error) {\n    console.error(\"Error sending message: \", error);\n    return false;\n  }\n};\n\nconst getUser = async (userId) => {\n  const userDocRef = doc(db, \"users\", userId);\n  const userSnap = await getDoc(userDocRef);\n  return userSnap.exists() ? userSnap.data() : null;\n};\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,SAAS,QAAQ,oBAAoB,CAAC,CAAE;AAC9D,SAASC,EAAE,QAAQ,aAAa;AAEhC,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,MAAM,EAAEC,IAAI,EAAEC,UAAU,KAAK;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACJ,MAAM,CAAC;IACtC,MAAMK,MAAM,GAAG,MAAMD,OAAO,CAACH,IAAI,CAAC;IAElC,IAAI,CAACE,QAAQ,IAAI,CAACE,MAAM,EAAE;MACxBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClC,OAAO,KAAK;IACd;IAEAL,UAAU,CAACM,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAE;;IAElD;IACA,MAAMC,WAAW,GAAGhB,GAAG,CAACG,EAAE,EAAE,OAAO,EAAEE,MAAM,CAAC;IAC5C,MAAMH,SAAS,CAACc,WAAW,EAAE;MAC3BC,YAAY,EAAE,CAAC,IAAIT,QAAQ,CAACS,YAAY,IAAI,EAAE,CAAC,EAAEV,UAAU;IAC7D,CAAC,CAAC;;IAEF;IACA,MAAMW,SAAS,GAAGlB,GAAG,CAACG,EAAE,EAAE,OAAO,EAAEG,IAAI,CAAC;IACxC,MAAMJ,SAAS,CAACgB,SAAS,EAAE;MACzBC,OAAO,EAAE,CAAC,IAAIT,MAAM,CAACS,OAAO,IAAI,EAAE,CAAC,EAAEZ,UAAU;IACjD,CAAC,CAAC;IAEF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC;AAED,MAAMX,OAAO,GAAG,MAAOY,MAAM,IAAK;EAChC,MAAMC,UAAU,GAAGtB,GAAG,CAACG,EAAE,EAAE,OAAO,EAAEkB,MAAM,CAAC;EAC3C,MAAME,QAAQ,GAAG,MAAMtB,MAAM,CAACqB,UAAU,CAAC;EACzC,OAAOC,QAAQ,CAACC,MAAM,CAAC,CAAC,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC,GAAG,IAAI;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}